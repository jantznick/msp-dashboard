// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  requests  Request[]
  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id])
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  users        User[]
  applications Application[]
  domains      String? // Comma-separated list of domains

  // Default metadata for new applications
  engManager        String?
  language          String?
  framework         String?
  serverEnvironment String?
  facing            String?
  deploymentType    String?
  authProfiles      String?
  dataTypes         String?
}

model ChangeLog {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  userEmail     String
  companyName   String
  changeDetails String // JSON string of changes
}

model Application {
  id          String    @id @default(cuid())
  name        String
  description String?
  owner       String?
  repoUrl     String?
  companyId   String
  company     Company   @relation(fields: [companyId], references: [id])
  requests    Request[]

  language            String?
  framework           String?
  serverEnvironment   String? // cloud vs on-prem
  facing              String? // external/internal
  deploymentType      String? // scheduled, ad-hoc
  authProfiles        String?
  dataTypes           String? // PII, PCI, etc.
}

model Request {
  id            Int         @id @default(autoincrement())
  products      String
  requestType   String
  users         String?
  notes         String?
  adminNotes    String?
  status        String      @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  createdAt     DateTime    @default(now())
  userId        String?
  User          User?       @relation(fields: [userId], references: [id])
  applicationId String?
  application   Application? @relation(fields: [applicationId], references: [id])
  scriptJobs    ScriptJob[]
}

model ScriptJob {
  id        Int      @id @default(autoincrement())
  requestId Int
  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  status    String // RUNNING, COMPLETED, FAILED
  output    String
  startedAt DateTime @default(now())
  endedAt   DateTime?
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
