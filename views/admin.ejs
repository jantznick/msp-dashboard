<%- include('partials/header') %>

<!-- React via CDN -->
<script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<div class="py-10 px-4">
    <div class="text-center">
        <h1 class="text-5xl font-bold text-[secondary]">Admin Dashboard</h1>
        <p class="mt-4 text-lg text-gray-500">Here you can view all tool requests.</p>
    </div>

    <!-- React Root -->
    <div id="admin-dashboard-root" class="mt-8"></div>
</div>

<script type="text/babel">
    const { useState, useEffect, Fragment } = React;

    const JiraModal = ({ request, jiraProjects, onClose, onTicketCreated, onDataRefresh }) => {
        if (!request) return null;
        const [selectedProject, setSelectedProject] = useState(Object.keys(jiraProjects)[0] || '');
        const [isCreating, setIsCreating] = useState(false);
        const [result, setResult] = useState(null);

        const handleCreate = async () => {
            setIsCreating(true);
            setResult(null);
            try {
                const response = await fetch('/api/create-jira-ticket', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ requestId: request.id, jiraProjectKey: selectedProject }),
                });
                const data = await response.json();
                if (response.ok) {
                    setResult({ success: true, ...data });
                    onTicketCreated();
                    onDataRefresh();
                } else {
                    setResult({ success: false, error: data.error });
                }
            } catch (error) {
                setResult({ success: false, error: 'A network error occurred.' });
            } finally {
                setIsCreating(false);
            }
        };

        return (
            <div className="fixed z-50 inset-0 overflow-y-auto">
                <div className="flex items-center justify-center min-h-screen">
                    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose}></div>
                    <div className="bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full z-20">
                        <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                            <h3 className="text-lg leading-6 font-medium text-gray-900">Create Jira Ticket for Request #{request.id}</h3>
                            <div className="mt-4">
                                <label htmlFor="jira-project-modal" className="block text-sm font-medium text-gray-700">Jira Project</label>
                                <select id="jira-project-modal" value={selectedProject} onChange={e => setSelectedProject(e.target.value)} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
                                    {Object.entries(jiraProjects).map(([key, name]) => (
                                        <option key={key} value={key}>{name}</option>
                                    ))}
                                </select>
                            </div>
                        </div>
                        <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse items-center">
                            <button type="button" onClick={handleCreate} disabled={isCreating} className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-base font-medium text-white hover:bg-blue-700 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50">
                                {isCreating ? 'Creating...' : 'Create'}
                            </button>
                            <button type="button" onClick={onClose} className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:mt-0 sm:w-auto sm:text-sm">Cancel</button>
                            <div className="mr-auto pl-2 text-sm">
                                {result && result.success && <a href={result.ticketUrl} target="_blank" className="text-blue-600 hover:underline">{result.ticketKey} created!</a>}
                                {result && !result.success && <span className="text-red-600">{result.error}</span>}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    };
    
    const StatusIcon = ({ request, onStatusChange }) => {
        const statusCycle = { "NEW": "IN_PROGRESS", "IN_PROGRESS": "COMPLETED", "COMPLETED": "NEW" };
        
        const statusInfo = {
            "NEW": { color: "text-red-400", title: "New Request", icon: "far fa-circle" },
            "IN_PROGRESS": { color: "text-yellow-500", title: "In Progress", icon: "fas fa-clock" },
            "COMPLETED": { color: "text-green-500", title: "Completed", icon: "fas fa-check-circle" }
        };

        const handleClick = async (e) => {
            e.stopPropagation(); // Prevent row from toggling
            const nextStatus = statusCycle[request.status];
            try {
                const response = await fetch(`/api/requests/${request.id}/status`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ status: nextStatus }),
                });
                if (response.ok) {
                    onStatusChange(request.id, nextStatus);
                } else {
                    alert('Failed to update status.');
                }
            } catch (error) {
                alert('A network error occurred while updating status.');
            }
        };

        const currentStatusInfo = statusInfo[request.status] || statusInfo["NEW"];
        
        return (
            <i 
                title={`Status: ${currentStatusInfo.title}`}
                onClick={handleClick}
                className={`w-6 h-6 flex items-center justify-center text-lg cursor-pointer ${currentStatusInfo.icon} ${currentStatusInfo.color}`}
            ></i>
        );
    };

    const RequestRow = ({ request, isExpanded, onToggleExpand, onOpenJiraModal, onStatusChange, onNotesUpdate, onDataRefresh }) => {
        const [adminNotes, setAdminNotes] = useState(request.adminNotes || '');
        const [isSaving, setIsSaving] = useState(false);
        const [jobs, setJobs] = useState(request.scriptJobs || []);
        const [selectedJobId, setSelectedJobId] = useState(jobs.length > 0 ? jobs[0].id : null);
        const [logContent, setLogContent] = useState('');
        const [isLoadingLogs, setIsLoadingLogs] = useState(false);

        const activeJob = jobs.find(j => j.id === selectedJobId);

        useEffect(() => {
            let isMounted = true;
            let pollInterval = null;

            const poll = async (jobId) => {
                try {
                    const response = await fetch(`/api/jobs/${jobId}`);
                    if (!isMounted) return; // Abort if component unmounted during fetch

                    const data = await response.json();
                    if (response.ok) {
                        setLogContent(data.logContent);
                        const newStatus = data.status;
                        setJobs(prevJobs => prevJobs.map(j => j.id === jobId ? { ...j, status: newStatus } : j));
                        if (newStatus === 'COMPLETED' || newStatus === 'FAILED') {
                            onDataRefresh();
                        }
                    }
                } catch (error) {
                    console.error("Polling error:", error);
                }
            };

            if (activeJob && activeJob.status === 'RUNNING') {
                pollInterval = setInterval(() => poll(activeJob.id), 3000);
            }
            
            return () => {
                isMounted = false;
                if(pollInterval) clearInterval(pollInterval);
            };
        }, [activeJob]);

        const fetchJobStatus = async (jobId) => {
            if (!jobId) return;
            try {
                const response = await fetch(`/api/jobs/${jobId}`);
                const data = await response.json();
                if (response.ok) {
                    setLogContent(data.logContent);
                    const newStatus = data.status;
                    setJobs(prevJobs => prevJobs.map(j => j.id === jobId ? { ...j, status: newStatus } : j));
                    if (newStatus === 'COMPLETED' || newStatus === 'FAILED') {
                       onDataRefresh();
                    }
                }
            } catch (error) {
                console.error("Polling error:", error);
            }
        };

        const viewLogs = async (jobId) => {
            setIsLoadingLogs(true);
            setLogContent('');
            await fetchJobStatus(jobId);
            setIsLoadingLogs(false);
        };
        
        useEffect(() => {
            if (selectedJobId) {
                viewLogs(selectedJobId);
            }
        }, [selectedJobId]);


        const handleSaveNotes = async (e) => {
            e.preventDefault();
            setIsSaving(true);
            try {
                const response = await fetch(`/api/requests/${request.id}/notes`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ adminNotes }),
                });
                if(response.ok) {
                    const updatedRequest = await response.json();
                    onNotesUpdate(request.id, updatedRequest.adminNotes);
                } else {
                    alert('Failed to save notes.');
                }
            } catch (error) {
                alert('A network error occurred while saving notes.');
            } finally {
                setIsSaving(false);
            }
        }

        const handleRunScript = async () => {
            setLogContent('--- Starting script... ---\n');
            try {
                const response = await fetch('/api/run-script', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        requestId: request.id,
                        scriptName: 'add_user.py',
                        args: [request.email, request.product, ...(request.users ? request.users.split(/[,\\s]+/) : [])]
                    }),
                });
                
                if (response.status === 202) {
                    const newJob = await response.json();
                    setJobs(prevJobs => [newJob, ...prevJobs]);
                    setSelectedJobId(newJob.id);
                } else {
                     const err = await response.json();
                    throw new Error(err.error || 'API Error');
                }
            } catch (error) {
                setLogContent(prev => prev + `\n--- ERROR: ${error.message} ---`);
            }
        }

        const renderScriptUI = () => {
            const isAnyJobRunning = jobs.some(j => j.status === 'RUNNING');
            return (
                <div>
                    <div className="flex items-center space-x-2">
                        <button onClick={handleRunScript} disabled={isAnyJobRunning} className="mt-2 flex-grow px-4 py-2 bg-green-600 text-white text-sm font-medium rounded-md hover:bg-green-700 disabled:opacity-50">
                            {isAnyJobRunning ? 'A job is running...' : 'Run New Script'}
                        </button>
                    </div>
                    {jobs.length > 0 && (
                        <div className="mt-4">
                            <label htmlFor="job-selector" className="block text-sm font-medium text-gray-700">Job History</label>
                            <select id="job-selector" value={selectedJobId} onChange={e => setSelectedJobId(Number(e.target.value))} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md">
                                {jobs.map(job => (
                                    <option key={job.id} value={job.id}>
                                        {new Date(job.createdAt).toLocaleString()} - {job.status}
                                    </option>
                                ))}
                            </select>
                            <div className="mt-4">
                                <h5 className="font-medium text-gray-600">Script Output:</h5>
                                <pre className="mt-2 text-xs text-gray-800 bg-gray-100 p-4 rounded-md shadow-inner h-48 overflow-y-auto whitespace-pre-wrap">
                                    {isLoadingLogs ? 'Loading logs...' : (logContent || 'Select a job to view its logs.')}
                                </pre>
                            </div>
                        </div>
                    )}
                </div>
            )
        }

        return (
            <Fragment>
                <tr onClick={onToggleExpand} className="hover:bg-gray-50 cursor-pointer">
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{new Date(request.timestamp).toLocaleString()}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{request.application?.company?.name || 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-800">{request.application?.name || 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-800">{request.User?.email || 'Guest'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-800">{request.product}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-800">{request.requestType}</td>
                    <td className="px-6 py-4 text-sm text-gray-500 break-all">{request.users || 'N/A'}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <div className="flex items-center space-x-4">
                            <i 
                                title="Create Jira Ticket"
                                onClick={(e) => { e.stopPropagation(); onOpenJiraModal(request); }} 
                                className="fab fa-jira text-xl text-blue-600 hover:text-blue-800 cursor-pointer"
                            ></i>
                            <StatusIcon request={request} onStatusChange={onStatusChange} />
                        </div>
                    </td>
                </tr>
                {isExpanded && (
                    <tr>
                        <td colSpan="8" className="p-6 bg-light-gray">
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                                <div>
                                    <h4 className="font-bold text-gray-700">User Notes</h4>
                                    <p className="mt-2 text-gray-600 bg-white p-4 rounded-md shadow-sm min-h-[100px]">{request.notes || 'No notes provided.'}</p>
                                </div>
                                <div>
                                    <h4 className="font-bold text-gray-700">Admin Notes</h4>
                                    <form onSubmit={handleSaveNotes}>
                                        <textarea value={adminNotes} onChange={e => setAdminNotes(e.target.value)} rows="4" className="mt-2 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm"></textarea>
                                        <button type="submit" disabled={isSaving} className="mt-2 px-4 py-2 bg-secondary text-white text-sm font-medium rounded-md hover:bg-opacity-90 disabled:opacity-50">
                                            {isSaving ? 'Saving...' : 'Save Notes'}
                                        </button>
                                    </form>
                                </div>
                                <div>
                                    <h4 className="font-bold text-gray-700">Run Action</h4>
                                    {request.requestType === 'Add Users' ? renderScriptUI() : (
                                        <p className="mt-2 text-gray-600">No script available for this request type.</p>
                                    )}
                                </div>
                            </div>
                        </td>
                    </tr>
                )}
            </Fragment>
        )
    }

    const AdminDashboard = ({ initialData }) => {
        const [requests, setRequests] = useState(initialData.requests);
        const [jiraProjects] = useState(initialData.jiraProjects);
        const [selectedRequestForJira, setSelectedRequestForJira] = useState(null);
        const [expandedRowId, setExpandedRowId] = useState(null);

        const handleStatusChange = (requestId, newStatus) => {
            setRequests(prevRequests =>
                prevRequests.map(r => r.id === requestId ? { ...r, status: newStatus } : r)
            );
        };

        const handleNotesUpdate = (requestId, newAdminNotes) => {
            setRequests(prevRequests =>
                prevRequests.map(r => r.id === requestId ? { ...r, adminNotes: newAdminNotes } : r)
            );
        };
        
        const handleTicketCreated = () => {
             // Future enhancement: could add a visual indicator here
        }

        const refreshData = async () => {
            try {
                const response = await fetch('/api/requests');
                if (response.ok) {
                    const data = await response.json();
                    // The API returns an array directly, so we use it directly
                    setRequests(data);
                } else {
                    console.error('Failed to refresh requests:', response.status);
                    setRequests([]); // Fallback to empty array to prevent crash
                }
            } catch (error) {
                console.error('Network error while refreshing requests:', error);
                setRequests([]); // Fallback to empty array to prevent crash
            }
        };

        useEffect(() => {
            // Initial data is loaded via server, no need for initial fetch
        }, []);

        return (
            <div>
                <div className="shadow-lg overflow-hidden border-b border-gray-200 sm:rounded-xl">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-primary">
                            <tr>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Timestamp</th>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Company</th>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Application</th>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Requestor</th>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Product</th>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Type</th>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Users</th>
                                <th className="px-6 py-4 text-left text-xs font-medium text-white uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {requests.map(request => (
                                <RequestRow
                                    key={request.id}
                                    request={request}
                                    isExpanded={expandedRowId === request.id}
                                    onToggleExpand={() => setExpandedRowId(expandedRowId === request.id ? null : request.id)}
                                    onOpenJiraModal={setSelectedRequestForJira}
                                    onStatusChange={handleStatusChange}
                                    onNotesUpdate={handleNotesUpdate}
                                    onDataRefresh={refreshData}
                                />
                            ))}
                        </tbody>
                    </table>
                </div>
                <JiraModal 
                    request={selectedRequestForJira} 
                    jiraProjects={jiraProjects} 
                    onClose={() => setSelectedRequestForJira(null)}
                    onTicketCreated={handleTicketCreated}
                    onDataRefresh={refreshData}
                />
            </div>
        );
    };

    const initialData = <%- initialData %>;

    ReactDOM.render(
        <AdminDashboard initialData={initialData} />,
        document.getElementById('admin-dashboard-root')
    );
</script>

<%- include('partials/footer') %>