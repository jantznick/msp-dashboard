<%- include('../partials/header') %>

<!-- React via CDN -->
<script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<div id="manage-apps-root" class="container mx-auto mt-10 px-4"></div>

<script type="text/babel">
    const { useState } = React;

    const EditApplicationModal = ({ app, companies, onClose, onSave }) => {
        if (!app) return null;

        const [name, setName] = useState(app.name);
        const [companyId, setCompanyId] = useState(app.companyId);
        const [description, setDescription] = useState(app.description || '');
        const [owner, setOwner] = useState(app.owner || '');
        const [repoUrl, setRepoUrl] = useState(app.repoUrl || '');
        const [language, setLanguage] = useState(app.language || '');
        const [framework, setFramework] = useState(app.framework || '');
        const [serverEnvironment, setServerEnvironment] = useState(app.serverEnvironment || '');
        const [facing, setFacing] = useState(app.facing || '');
        const [deploymentType, setDeploymentType] = useState(app.deploymentType || '');
        const [authProfiles, setAuthProfiles] = useState(app.authProfiles || '');
        const [dataTypes, setDataTypes] = useState(app.dataTypes || '');
        const [isSaving, setIsSaving] = useState(false);

        const handleSubmit = async (e) => {
            e.preventDefault();
            setIsSaving(true);
            await onSave(app.id, { 
                name, companyId, description, owner, repoUrl, language, framework, 
                serverEnvironment, facing, deploymentType, authProfiles, dataTypes 
            });
            setIsSaving(false);
            onClose();
        };

        return (
            <div className="fixed z-50 inset-0 overflow-y-auto">
                <div className="flex items-center justify-center min-h-screen">
                    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose}></div>
                    <div className="bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full z-50">
                        <form onSubmit={handleSubmit}>
                            <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                                <h3 className="text-lg leading-6 font-medium text-gray-900">Edit Application: {app.name}</h3>
                                <div className="mt-4">
                                    <label htmlFor="editName" className="block text-sm font-medium text-gray-700">Application Name</label>
                                    <input type="text" id="editName" value={name} onChange={(e) => setName(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" required />
                                </div>
                                <div className="mt-4">
                                    <label htmlFor="editCompanyId" className="block text-sm font-medium text-gray-700">Company</label>
                                    <select id="editCompanyId" value={companyId} onChange={(e) => setCompanyId(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" required>
                                        {companies.map(company => (
                                            <option key={company.id} value={company.id}>{company.name}</option>
                                        ))}
                                    </select>
                                </div>
                                <div className="mt-4">
                                    <label htmlFor="editDescription" className="block text-sm font-medium text-gray-700">Description</label>
                                    <textarea id="editDescription" value={description} onChange={(e) => setDescription(e.target.value)} rows="3" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"></textarea>
                                </div>
                                <div className="mt-4 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                                    <div>
                                        <label htmlFor="editOwner" className="block text-sm font-medium text-gray-700">Owner</label>
                                        <input type="text" id="editOwner" value={owner} onChange={(e) => setOwner(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                    </div>
                                    <div>
                                        <label htmlFor="editRepoUrl" className="block text-sm font-medium text-gray-700">Repository URL</label>
                                        <input type="url" id="editRepoUrl" value={repoUrl} onChange={(e) => setRepoUrl(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                    </div>
                                </div>
                                <div className="mt-4 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-3">
                                    <div>
                                        <label htmlFor="editLanguage" className="block text-sm font-medium text-gray-700">Language</label>
                                        <input type="text" id="editLanguage" value={language} onChange={(e) => setLanguage(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                    </div>
                                    <div>
                                        <label htmlFor="editFramework" className="block text-sm font-medium text-gray-700">Framework</label>
                                        <input type="text" id="editFramework" value={framework} onChange={(e) => setFramework(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                    </div>
                                    <div>
                                        <label htmlFor="editServerEnvironment" className="block text-sm font-medium text-gray-700">Server Environment</label>
                                        <input type="text" id="editServerEnvironment" value={serverEnvironment} onChange={(e) => setServerEnvironment(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. AWS, On-prem" />
                                    </div>
                                </div>
                                <div className="mt-4 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                                    <div>
                                        <label htmlFor="editFacing" className="block text-sm font-medium text-gray-700">Facing</label>
                                        <input type="text" id="editFacing" value={facing} onChange={(e) => setFacing(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. Internal, External" />
                                    </div>
                                    <div>
                                        <label htmlFor="editDeploymentType" className="block text-sm font-medium text-gray-700">Deployment Type</label>
                                        <input type="text" id="editDeploymentType" value={deploymentType} onChange={(e) => setDeploymentType(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. Scheduled, Ad-hoc" />
                                    </div>
                                </div>
                                <div className="mt-4">
                                    <label htmlFor="editAuthProfiles" className="block text-sm font-medium text-gray-700">Necessary Auth Profiles</label>
                                    <input type="text" id="editAuthProfiles" value={authProfiles} onChange={(e) => setAuthProfiles(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                </div>
                                <div className="mt-4">
                                    <label htmlFor="editDataTypes" className="block text-sm font-medium text-gray-700">Data Types Collected/Stored</label>
                                    <input type="text" id="editDataTypes" value={dataTypes} onChange={(e) => setDataTypes(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. PII, PCI" />
                                </div>
                            </div>
                            <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                                <button type="submit" disabled={isSaving} className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-700 text-base font-medium text-white hover:bg-blue-800 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50">
                                    {isSaving ? 'Saving...' : 'Save'}
                                </button>
                                <button type="button" onClick={onClose} className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:mt-0 sm:w-auto sm:text-sm">
                                    Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        );
    };

    const ManageApplicationsPage = ({ initialApps, initialCompanies }) => {
        const [applications, setApplications] = useState(initialApps);
        const [companies] = useState(initialCompanies);
        const [editingApp, setEditingApp] = useState(null);
        const [filterCompany, setFilterCompany] = useState('');
        const [expandedAppId, setExpandedAppId] = useState(null);
        const [isAddModalOpen, setIsAddModalOpen] = useState(false);
        
        const getCompanyName = (companyId) => {
            const company = companies.find(c => c.id === companyId);
            return company ? company.name : 'N/A';
        };

        const handleSave = async (appId, data) => {
            try {
                const response = await fetch(`/admin/applications/${appId}/update`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data)
                });
                if (response.ok) {
                    setApplications(applications.map(a => a.id === appId ? { ...a, ...data, company: { name: getCompanyName(data.companyId) } } : a));
                } else {
                    alert('Failed to save application.');
                }
            } catch (error) {
                alert('An error occurred while saving.');
            }
        };

        const refreshApplications = async () => {
            const response = await fetch('/api/applications');
            const data = await response.json();
            setApplications(data);
        };

        const handleSaveSuccess = () => {
            setEditingApp(null);
            refreshApplications();
        };

        const filteredApps = filterCompany 
            ? applications.filter(app => app.companyId === filterCompany)
            : applications;

        return (
            <div>
                <div className="flex justify-between items-center mb-6">
                    <h1 className="text-3xl font-bold text-gray-800">Manage Applications</h1>
                    <button onClick={() => setIsAddModalOpen(true)} className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">
                        Add New Application
                    </button>
                </div>

                {isAddModalOpen && (
                    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 h-full w-full z-50 flex items-center justify-center p-4">
                        <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl w-full overflow-y-auto max-h-full">
                            <h2 className="text-2xl font-bold mb-4">Add New Application</h2>
                            <form action="/admin/applications/add" method="POST" className="space-y-4">
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label htmlFor="name" className="block text-sm font-medium text-gray-700">Application Name</label>
                                        <input type="text" name="name" id="name" required className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"/>
                                    </div>
                                    <div>
                                        <label htmlFor="companyId" className="block text-sm font-medium text-gray-700">Company</label>
                                        <select name="companyId" id="companyId" required className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm">
                                            <option value="">Select a company</option>
                                            {companies.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}
                                        </select>
                                    </div>
                                </div>
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label htmlFor="owner" className="block text-sm font-medium text-gray-700">Owner Email</label>
                                        <input type="email" name="owner" id="owner" className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"/>
                                    </div>
                                    <div>
                                        <label htmlFor="repoUrl" className="block text-sm font-medium text-gray-700">Repository URL</label>
                                        <input type="url" name="repoUrl" id="repoUrl" className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"/>
                                    </div>
                                </div>
                                <div>
                                    <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
                                    <textarea name="description" id="description" rows="3" className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"></textarea>
                                </div>
                                <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                                    <div>
                                        <label htmlFor="language" className="block text-sm font-medium text-gray-700">Language</label>
                                        <input type="text" id="language" name="language" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                    </div>
                                    <div>
                                        <label htmlFor="framework" className="block text-sm font-medium text-gray-700">Framework</label>
                                        <input type="text" id="framework" name="framework" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                    </div>
                                </div>
                                <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-3 mt-4">
                                    <div>
                                        <label htmlFor="serverEnvironment" className="block text-sm font-medium text-gray-700">Server Environment:</label>
                                        <input type="text" id="serverEnvironment" name="serverEnvironment" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. AWS, On-prem" />
                                    </div>
                                </div>
                                <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2 mt-4">
                                    <div>
                                        <label htmlFor="facing" className="block text-sm font-medium text-gray-700">Facing:</label>
                                        <input type="text" id="facing" name="facing" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. Internal, External" />
                                    </div>
                                    <div>
                                        <label htmlFor="deploymentType" className="block text-sm font-medium text-gray-700">Deployment Type:</label>
                                        <input type="text" id="deploymentType" name="deploymentType" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. Scheduled, Ad-hoc" />
                                    </div>
                                </div>
                                <div className="mt-4">
                                    <label htmlFor="authProfiles" className="block text-sm font-medium text-gray-700">Necessary Auth Profiles:</label>
                                    <input type="text" id="authProfiles" name="authProfiles" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                </div>
                                <div className="mt-4">
                                    <label htmlFor="dataTypes" className="block text-sm font-medium text-gray-700">Data Types Collected/Stored:</label>
                                    <input type="text" id="dataTypes" name="dataTypes" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. PII, PCI" />
                                </div>
                                <div>
                                    <button type="button" onClick={() => setIsAddModalOpen(false)} className="bg-gray-200 text-gray-800 font-bold py-2 px-4 rounded-lg mr-2 hover:bg-gray-300">
                                        Cancel
                                    </button>
                                    <button type="submit" className="bg-blue-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-blue-700">
                                        Add Application
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                )}

                <div className="bg-white p-6 rounded-lg shadow-md mb-8">
                    <div className="flex justify-between items-center mb-4">
                        <h2 className="text-2xl font-semibold text-gray-700">Existing Applications</h2>
                        <div>
                            <label htmlFor="company-filter" className="text-sm font-medium text-gray-700 mr-2">Filter by Company:</label>
                            <select 
                                id="company-filter" 
                                value={filterCompany} 
                                onChange={e => setFilterCompany(e.target.value)}
                                className="shadow-sm appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                            >
                                <option value="">All Companies</option>
                                {companies.map(company => (
                                    <option key={company.id} value={company.id}>{company.name}</option>
                                ))}
                            </select>
                        </div>
                    </div>
                    <div className="overflow-x-auto">
                        <table className="min-w-full bg-white">
                             <thead className="bg-gray-100">
                                <tr>
                                    <th className="py-2 px-4 border-b">Name</th>
                                    <th className="py-2 px-4 border-b">Company</th>
                                    <th className="py-2 px-4 border-b">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                {filteredApps.map(app => (
                                    <React.Fragment key={app.id}>
                                        <tr onClick={() => setExpandedAppId(expandedAppId === app.id ? null : app.id)} className="hover:bg-gray-50 cursor-pointer">
                                            <td className="py-2 px-4 border-b font-medium">{app.name}</td>
                                            <td className="py-2 px-4 border-b">{getCompanyName(app.companyId)}</td>
                                            <td className="py-2 px-4 border-b text-center">
                                                <button onClick={(e) => { e.stopPropagation(); setEditingApp(app); }} className="text-blue-500 hover:underline">Edit</button>
                                            </td>
                                        </tr>
                                        {expandedAppId === app.id && (
                                            <tr>
                                                <td colSpan="3" className="p-4 bg-gray-50">
                                                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm">
                                                        <div>
                                                            <h4 className="font-semibold text-gray-700">Description</h4>
                                                            <p className="text-gray-600 mt-1">{app.description || 'N/A'}</p>
                                                        </div>
                                                         <div>
                                                            <h4 className="font-semibold text-gray-700">Owner</h4>
                                                            <p className="text-gray-600 mt-1">{app.owner || 'N/A'}</p>
                                                        </div>
                                                        <div>
                                                            <h4 className="font-semibold text-gray-700">Repository</h4>
                                                            {app.repoUrl ? (
                                                                <a href={app.repoUrl} target="_blank" className="text-blue-500 hover:underline mt-1 block">{app.repoUrl}</a>
                                                            ) : (
                                                                <p className="text-gray-600 mt-1">N/A</p>
                                                            )}
                                                        </div>
                                                    </div>
                                                    <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm mt-4 pt-4 border-t">
                                                        <div>
                                                            <h4 className="font-semibold text-gray-700">Language</h4>
                                                            <p className="text-gray-600 mt-1">{app.language || 'N/A'}</p>
                                                        </div>
                                                        <div>
                                                            <h4 className="font-semibold text-gray-700">Framework</h4>
                                                            <p className="text-gray-600 mt-1">{app.framework || 'N/A'}</p>
                                                        </div>
                                                        <div>
                                                            <h4 className="font-semibold text-gray-700">Server Environment</h4>
                                                            <p className="text-gray-600 mt-1">{app.serverEnvironment || 'N/A'}</p>
                                                        </div>
                                                    </div>
                                                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm mt-4 pt-4 border-t">
                                                        <div>
                                                            <h4 className="font-semibold text-gray-700">Facing</h4>
                                                            <p className="text-gray-600 mt-1">{app.facing || 'N/A'}</p>
                                                        </div>
                                                         <div>
                                                            <h4 className="font-semibold text-gray-700">Deployment Type</h4>
                                                            <p className="text-gray-600 mt-1">{app.deploymentType || 'N/A'}</p>
                                                        </div>
                                                    </div>
                                                    <div className="mt-4 pt-4 border-t text-sm">
                                                        <h4 className="font-semibold text-gray-700">Necessary Auth Profiles</h4>
                                                        <p className="text-gray-600 mt-1">{app.authProfiles || 'N/A'}</p>
                                                    </div>
                                                    <div className="mt-4 pt-4 border-t text-sm">
                                                        <h4 className="font-semibold text-gray-700">Data Types Collected/Stored</h4>
                                                        <p className="text-gray-600 mt-1">{app.dataTypes || 'N/A'}</p>
                                                    </div>
                                                    <ContactManager application={app} onContactsUpdate={refreshApplications} />
                                                </td>
                                            </tr>
                                        )}
                                    </React.Fragment>
                                ))}
                            </tbody>
                        </table>
                    </div>
                </div>
                <EditApplicationModal
                    app={editingApp}
                    companies={companies}
                    onClose={() => setEditingApp(null)}
                    onSave={handleSave}
                />
            </div>
        );
    };

    const ContactManager = ({ application, onContactsUpdate }) => {
        const [editingContact, setEditingContact] = useState(null);
        const [contactToDelete, setContactToDelete] = useState(null);

        const handleSave = async (contactData) => {
            const url = contactData.id ? `/api/contacts/${contactData.id}` : '/api/contacts';
            const method = contactData.id ? 'PUT' : 'POST';
            
            const body = {
                ...contactData,
                applicationId: application.id,
            };
            if (contactData.id) delete body.id;

            const response = await fetch(url, {
                method: method,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(body)
            });
            if (response.ok) {
                onContactsUpdate();
                setEditingContact(null);
            } else {
                alert('Failed to save contact.');
            }
        };

        const handleDelete = async (contactId) => {
            const response = await fetch(`/api/contacts/${contactId}`, { method: 'DELETE' });
            if (response.ok) {
                onContactsUpdate();
            } else {
                alert('Failed to delete contact.');
            }
            setContactToDelete(null);
        };
        
        return (
            <div className="mt-4 pt-4 border-t">
                <div className="flex justify-between items-center">
                    <h4 className="font-semibold text-gray-700">Contacts</h4>
                    <button onClick={() => setEditingContact({ name: '', title: '', email: '' })} className="bg-blue-500 text-white px-2 py-1 rounded text-xs">Add Contact</button>
                </div>
                <ul className="mt-2 space-y-2">
                    {(application.contacts || []).map(contact => (
                        <li key={contact.id} className="text-sm p-2 bg-gray-100 rounded">
                            <div className="font-bold">{contact.name}</div>
                            <div>{contact.title}</div>
                            <div>{contact.email}</div>
                            <div className="mt-1">
                                <button onClick={() => setEditingContact(contact)} className="text-blue-600 text-xs">Edit</button>
                                <button onClick={() => setContactToDelete(contact)} className="text-red-600 text-xs ml-2">Delete</button>
                            </div>
                        </li>
                    ))}
                </ul>
                {editingContact && <ContactModal contact={editingContact} onSave={handleSave} onClose={() => setEditingContact(null)} />}
                {contactToDelete && (
                    <ConfirmModal
                        title="Delete Contact"
                        message={`Are you sure you want to delete ${contactToDelete.name}?`}
                        onConfirm={() => handleDelete(contactToDelete.id)}
                        onCancel={() => setContactToDelete(null)}
                    />
                )}
            </div>
        );
    };

    const ContactModal = ({ contact, onSave, onClose }) => {
        const [formData, setFormData] = useState(contact);

        const handleChange = (e) => {
            setFormData({ ...formData, [e.target.name]: e.target.value });
        };

        const handleSubmit = (e) => {
            e.preventDefault();
            onSave(formData);
        };

        return (
            <div className="fixed inset-0 bg-gray-600 bg-opacity-50 h-full w-full z-50 flex items-center justify-center">
                <div className="bg-white rounded-lg shadow-xl p-6 w-96">
                    <h3 className="text-lg font-bold mb-4">{contact.id ? 'Edit' : 'Add'} Contact</h3>
                    <form onSubmit={handleSubmit}>
                        <input type="text" name="name" value={formData.name} onChange={handleChange} placeholder="Name" className="w-full p-2 border rounded mb-2" required />
                        <input type="text" name="title" value={formData.title} onChange={handleChange} placeholder="Title" className="w-full p-2 border rounded mb-2" />
                        <input type="email" name="email" value={formData.email} onChange={handleChange} placeholder="Email" className="w-full p-2 border rounded mb-4" />
                        <div className="flex justify-end">
                            <button type="button" onClick={onClose} className="bg-gray-200 px-4 py-2 rounded mr-2">Cancel</button>
                            <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">Save</button>
                        </div>
                    </form>
                </div>
            </div>
        );
    };

    const ConfirmModal = ({ title, message, onConfirm, onCancel }) => {
        return (
            <div className="fixed inset-0 bg-gray-600 bg-opacity-50 h-full w-full z-50 flex items-center justify-center">
                <div className="bg-white rounded-lg shadow-xl p-6 w-96">
                    <h3 className="text-lg font-bold mb-4">{title}</h3>
                    <p className="mb-6">{message}</p>
                    <div className="flex justify-end">
                        <button type="button" onClick={onCancel} className="bg-gray-200 px-4 py-2 rounded mr-2">Cancel</button>
                        <button type="button" onClick={onConfirm} className="bg-red-600 text-white px-4 py-2 rounded">Confirm</button>
                    </div>
                </div>
            </div>
        );
    };

    const initialApps = <%- JSON.stringify(applications) %>;
    const initialCompanies = <%- JSON.stringify(companies) %>;

    ReactDOM.render(
        <ManageApplicationsPage initialApps={initialApps} initialCompanies={initialCompanies} />,
        document.getElementById('manage-apps-root')
    );
</script>

<%- include('../partials/footer') %>
