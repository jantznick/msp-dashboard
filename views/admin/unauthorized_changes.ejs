<%- include('../partials/header') %>

<!-- React via CDN -->
<script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<div id="changelog-root" class="container mx-auto mt-10 px-4"></div>

<script type="text/babel">
    const { useState, useEffect, Fragment } = React;

    const ChangeLogPage = () => {
        const [logs, setLogs] = useState([]);
        const [companies, setCompanies] = useState([]);
        const [loading, setLoading] = useState(true);
        const [error, setError] = useState(null);
        const [modalLog, setModalLog] = useState(null);

        const fetchData = async () => {
            try {
                const logsRes = await fetch('/api/changelogs');
                if (!logsRes.ok) throw new Error('Failed to fetch logs');
                const logsData = await logsRes.json();
                setLogs(logsData);

                const companiesRes = await fetch('/api/companies');
                if (!companiesRes.ok) throw new Error('Failed to fetch companies');
                const companiesData = await companiesRes.json();
                setCompanies(companiesData);

            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        useEffect(() => {
            fetchData();
        }, []);
        
        const onModalClose = (updatedLog) => {
            if (updatedLog) {
                setLogs(logs.map(log => log.id === updatedLog.id ? updatedLog : log));
            }
            setModalLog(null);
        };

        const getStatusPill = (status) => {
            switch (status) {
                case 'APPROVED': return 'bg-green-100 text-green-800';
                case 'REJECTED': return 'bg-red-100 text-red-800';
                default: return 'bg-yellow-100 text-yellow-800';
            }
        };

        if (loading) return <p>Loading...</p>;
        if (error) return <p>Error: {error}</p>;

        return (
            <div>
                <h1 className="text-3xl font-bold mb-6 text-gray-800">Review Submissions</h1>
                {modalLog && <DetailsModal log={modalLog} companies={companies} onClose={onModalClose} />}
                <div className="bg-white shadow-md rounded-lg overflow-hidden">
                    <table className="min-w-full divide-y divide-gray-200">
                        <thead className="bg-gray-50">
                            <tr>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Target</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                            {logs.map((log) => (
                                <tr key={log.id} className="hover:bg-gray-50">
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{new Date(log.createdAt).toLocaleString()}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{log.userEmail}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{log.proposedCompanyName ? 'New Company' : 'Update'}</td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{log.proposedCompanyName || log.companyName}</td>
                                    <td className="px-6 py-4 whitespace-nowrap">
                                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusPill(log.status)}`}>
                                            {log.status}
                                        </span>
                                    </td>
                                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                        <button 
                                            onClick={() => setModalLog(log)} 
                                            className="text-indigo-600 hover:text-indigo-900"
                                        >
                                            {log.status === 'PENDING' ? 'Review' : 'Details'}
                                        </button>
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
        );
    };

    const DetailsModal = ({ log, companies, onClose }) => {
        const changeDetails = JSON.parse(log.changeDetails);
        const allFields = Object.keys(changeDetails).filter(key => changeDetails[key] && String(changeDetails[key]).trim());

        const [targetCompanyId, setTargetCompanyId] = useState(log.targetCompanyId || 'CREATE_NEW');
        const [newCompanyName, setNewCompanyName] = useState(log.proposedCompanyName || log.companyName || '');
        const [selectedFields, setSelectedFields] = useState(allFields);
        
        const isNewCompanySubmission = !!log.proposedCompanyName;
        const currentTarget = companies.find(c => c.id === targetCompanyId);

        useEffect(() => {
            setSelectedFields(allFields);
        }, [log.id]);

        const handleSelectAll = (e) => {
            setSelectedFields(e.target.checked ? allFields : []);
        };
        
        const handleFieldToggle = (field) => {
            setSelectedFields(prev => prev.includes(field) ? prev.filter(f => f !== field) : [...prev, field]);
        };

        const handleSubmit = async () => {
            const isCreatingNew = targetCompanyId === 'CREATE_NEW';

            if (isCreatingNew && !newCompanyName.trim()) {
                return alert('Please provide a name for the new company.');
            }
             if (selectedFields.length === 0) {
                return alert('Please select at least one field to apply.');
            }

            const payload = {
                action: isCreatingNew ? 'create' : 'merge',
                targetCompanyId: isCreatingNew ? null : targetCompanyId,
                newCompanyName: isCreatingNew ? newCompanyName.trim() : null,
                mergeFields: selectedFields
            };
            
            const res = await fetch(`/api/changelogs/${log.id}/approve`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (res.ok) {
                const updatedLog = await res.json();
                onClose(updatedLog);
            } else {
                const err = await res.json();
                alert(`Error: ${err.error}`);
            }
        };

        return (
            <div className="fixed inset-0 bg-gray-600 bg-opacity-50 h-full w-full z-50 flex items-center justify-center p-4">
                <div className="relative w-full max-w-4xl shadow-lg rounded-md bg-white flex flex-col max-h-[90vh]">
                    {/* Modal Header */}
                    <div className="p-6 border-b">
                        <h3 className="text-2xl font-bold">Review Submission Details</h3>
                    </div>

                    {/* Modal Body (Scrollable) */}
                    <div className="p-6 overflow-y-auto">
                        <div className="bg-gray-50 p-4 rounded-md mb-6">
                            <h4 className="font-semibold text-lg mb-2">Target Company</h4>
                            {isNewCompanySubmission ? (
                                <p>This is a submission for a new company named <strong>{log.proposedCompanyName}</strong>.</p>
                            ) : (
                                <div className="grid grid-cols-2 gap-4 items-center">
                                    <div>
                                        <label htmlFor="target-company" className="block text-sm font-medium text-gray-700">Apply changes to:</label>
                                        <select 
                                            id="target-company" 
                                            value={targetCompanyId} 
                                            onChange={e => setTargetCompanyId(e.target.value)} 
                                            className="mt-1 block w-full p-2 border-gray-300 rounded-md shadow-sm"
                                            disabled={log.status !== 'PENDING'}
                                        >
                                            <option value="CREATE_NEW">-- Create a new company --</option>
                                            {companies.map(c => <option key={c.id} value={c.id}>{c.name}</option>)}
                                        </select>
                                    </div>
                                    {targetCompanyId === 'CREATE_NEW' && (
                                        <div>
                                            <label htmlFor="new-company-name" className="block text-sm font-medium text-gray-700">New company name:</label>
                                            <input
                                                type="text"
                                                id="new-company-name"
                                                value={newCompanyName}
                                                onChange={(e) => setNewCompanyName(e.target.value)}
                                                className="mt-1 block w-full p-2 border border-gray-300 rounded-md shadow-sm"
                                                disabled={log.status !== 'PENDING'}
                                            />
                                        </div>
                                    )}
                                </div>
                            )}
                        </div>

                        <h4 className="font-semibold text-lg mb-2">Proposed Changes</h4>
                        <div className="border rounded-md">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50 sticky top-0">
                                    <tr>
                                        {log.status === 'PENDING' && (
                                            <th className="p-4 text-left">
                                                <input 
                                                    type="checkbox"
                                                    checked={selectedFields.length === allFields.length}
                                                    onChange={handleSelectAll}
                                                    className="h-4 w-4"
                                                />
                                            </th>
                                        )}
                                        <th className="p-4 text-left text-xs font-medium text-gray-500 uppercase">Field</th>
                                        <th className="p-4 text-left text-xs font-medium text-gray-500 uppercase">Current Value</th>
                                        <th className="p-4 text-left text-xs font-medium text-gray-500 uppercase">Proposed Value</th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {allFields.map(key => (
                                        <tr key={key}>
                                            {log.status === 'PENDING' && (
                                                <td className="p-4">
                                                    <input 
                                                        type="checkbox" 
                                                        checked={selectedFields.includes(key)}
                                                        onChange={() => handleFieldToggle(key)}
                                                        className="h-4 w-4"
                                                    />
                                                </td>
                                            )}
                                            <td className="p-4 font-medium text-gray-800">{key}</td>
                                            <td className="p-4 text-gray-600 italic">{currentTarget?.[key] || 'Not set'}</td>
                                            <td className="p-4 text-gray-800">{String(changeDetails[key])}</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    {/* Modal Footer */}
                    <div className="p-6 border-t flex justify-end space-x-4">
                        <button onClick={() => onClose(null)} className="px-4 py-2 bg-gray-300 text-gray-800 rounded hover:bg-gray-400">Close</button>
                        {log.status === 'PENDING' && (
                            <button 
                                onClick={handleSubmit} 
                                className="px-4 py-2 bg-blue-700 text-white rounded hover:bg-blue-800"
                            >
                                Approve Selected Changes
                            </button>
                        )}
                    </div>
                </div>
            </div>
        );
    };

    ReactDOM.render(<ChangeLogPage />, document.getElementById('changelog-root'));
</script>

<%- include('../partials/footer') %>
