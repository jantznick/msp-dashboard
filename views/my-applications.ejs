<%- include('partials/header') %>

<!-- React via CDN -->
<script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

<div id="my-apps-root" class="container mx-auto mt-10 px-4"></div>

<script type="text/babel">
    const { useState } = React;

    const EditApplicationModal = ({ app, onClose, onSave }) => {
        if (!app) return null;

        const [name, setName] = useState(app.name);
        const [description, setDescription] = useState(app.description || '');
        const [owner, setOwner] = useState(app.owner || '');
        const [repoUrl, setRepoUrl] = useState(app.repoUrl || '');
        const [language, setLanguage] = useState(app.language || '');
        const [framework, setFramework] = useState(app.framework || '');
        const [serverEnvironment, setServerEnvironment] = useState(app.serverEnvironment || '');
        const [facing, setFacing] = useState(app.facing || '');
        const [deploymentType, setDeploymentType] = useState(app.deploymentType || '');
        const [authProfiles, setAuthProfiles] = useState(app.authProfiles || '');
        const [dataTypes, setDataTypes] = useState(app.dataTypes || '');
        const [isSaving, setIsSaving] = useState(false);
        const [error, setError] = useState('');

        const handleSubmit = async (e) => {
            e.preventDefault();
            setIsSaving(true);
            setError('');

            try {
                const response = await fetch(`/api/applications/${app.id}/update`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        name, description, owner, repoUrl, language, framework, 
                        serverEnvironment, facing, deploymentType, authProfiles, dataTypes 
                    })
                });

                if (response.ok) {
                    const updatedApp = await response.json();
                    onSave(updatedApp);
                } else {
                    const err = await response.json();
                    setError(err.error || 'Failed to save application.');
                }
            } catch (err) {
                setError('An error occurred while saving.');
            } finally {
                setIsSaving(false);
            }
        };

        return (
             <div className="fixed z-50 inset-0 overflow-y-auto">
                <div className="flex items-center justify-center min-h-screen">
                    <div className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" onClick={onClose}></div>
                    <div className="bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:max-w-lg sm:w-full z-50">
                        <form onSubmit={handleSubmit}>
                            <div className="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                                <h3 className="text-lg leading-6 font-medium text-gray-900">Edit Application: {app.name}</h3>
                                <div className="mt-4 space-y-4">
                                    <div>
                                        <label htmlFor="editName" className="block text-sm font-medium text-gray-700">Application Name</label>
                                        <input type="text" id="editName" value={name} onChange={(e) => setName(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" required />
                                    </div>
                                    <div>
                                        <label htmlFor="editDescription" className="block text-sm font-medium text-gray-700">Description</label>
                                        <textarea id="editDescription" value={description} onChange={(e) => setDescription(e.target.value)} rows="3" className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"></textarea>
                                    </div>
                                    <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                                        <div>
                                            <label htmlFor="editOwner" className="block text-sm font-medium text-gray-700">Owner</label>
                                            <input type="text" id="editOwner" value={owner} onChange={(e) => setOwner(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                        </div>
                                        <div>
                                            <label htmlFor="editRepoUrl" className="block text-sm font-medium text-gray-700">Repository URL</label>
                                            <input type="url" id="editRepoUrl" value={repoUrl} onChange={(e) => setRepoUrl(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                        </div>
                                    </div>
                                    <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-3 mt-4">
                                        <div>
                                            <label htmlFor="editLanguage" className="block text-sm font-medium text-gray-700">Language</label>
                                            <input type="text" id="editLanguage" value={language} onChange={(e) => setLanguage(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                        </div>
                                        <div>
                                            <label htmlFor="editFramework" className="block text-sm font-medium text-gray-700">Framework</label>
                                            <input type="text" id="editFramework" value={framework} onChange={(e) => setFramework(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                        </div>
                                        <div>
                                            <label htmlFor="editServerEnvironment" className="block text-sm font-medium text-gray-700">Server Environment</label>
                                            <input type="text" id="editServerEnvironment" value={serverEnvironment} onChange={(e) => setServerEnvironment(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. AWS, On-prem"/>
                                        </div>
                                    </div>
                                    <div className="mt-4 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                                        <div>
                                            <label htmlFor="editFacing" className="block text-sm font-medium text-gray-700">Facing</label>
                                            <input type="text" id="editFacing" value={facing} onChange={(e) => setFacing(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. Internal, External" />
                                        </div>
                                        <div>
                                            <label htmlFor="editDeploymentType" className="block text-sm font-medium text-gray-700">Deployment Type</label>
                                            <input type="text" id="editDeploymentType" value={deploymentType} onChange={(e) => setDeploymentType(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. Scheduled, Ad-hoc" />
                                        </div>
                                    </div>
                                    <div className="mt-4">
                                        <label htmlFor="editAuthProfiles" className="block text-sm font-medium text-gray-700">Necessary Auth Profiles</label>
                                        <input type="text" id="editAuthProfiles" value={authProfiles} onChange={(e) => setAuthProfiles(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" />
                                    </div>
                                    <div className="mt-4">
                                        <label htmlFor="editDataTypes" className="block text-sm font-medium text-gray-700">Data Types Collected/Stored</label>
                                        <input type="text" id="editDataTypes" value={dataTypes} onChange={(e) => setDataTypes(e.target.value)} className="mt-1 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md" placeholder="e.g. PII, PCI" />
                                    </div>
                                </div>
                                {error && <p className="mt-4 text-sm text-red-600">{error}</p>}
                            </div>
                            <div className="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                                <button type="submit" disabled={isSaving} className="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-700 text-base font-medium text-white hover:bg-blue-800 sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50">
                                    {isSaving ? 'Saving...' : 'Save'}
                                </button>
                                <button type="button" onClick={onClose} className="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:mt-0 sm:w-auto sm:text-sm">
                                    Cancel
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        );
    };

    const MyApplicationsPage = ({ initialApps, initialCompany }) => {
        const [applications, setApplications] = useState(initialApps);
        const [company] = useState(initialCompany);
        const [expandedAppId, setExpandedAppId] = useState(null);
        const [editingApp, setEditingApp] = useState(null);

        if (!company) {
             return (
                <div className="text-center bg-white p-8 rounded-lg shadow-md">
                    <p className="text-gray-600">
                        You are not currently associated with a company. An administrator can assign you to one.
                    </p>
                </div>
            );
        }

        const handleSave = (updatedApp) => {
            setApplications(applications.map(app => app.id === updatedApp.id ? updatedApp : app));
            setEditingApp(null);
        };

        return (
            <div>
                <div class="text-center mb-8">
                    <h1 class="text-4xl font-bold text-[secondary] mb-2">My Company's Applications</h1>
                    <p class="text-xl text-gray-600">Company: <span class="font-semibold">{company.name}</span></p>
                </div>

                <div className="bg-white p-6 rounded-lg shadow-md mb-8">
                    <h2 className="text-2xl font-semibold text-gray-700 mb-4">Add a New Application</h2>
                    <form action="/my-applications/add" method="POST" className="space-y-4">
                        <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                            <div>
                                <label htmlFor="name" className="block text-sm font-bold text-gray-700">Application Name:</label>
                                <input type="text" id="name" name="name" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" required />
                            </div>
                            <div>
                                <label htmlFor="owner" className="block text-sm font-bold text-gray-700">Owner / Eng. Lead:</label>
                                <input type="text" id="owner" name="owner" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" />
                            </div>
                        </div>
                         <div>
                            <label htmlFor="description" className="block text-sm font-bold text-gray-700">Description / Use Case:</label>
                            <textarea id="description" name="description" rows="3" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700"></textarea>
                        </div>
                        <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-3">
                             <div>
                                <label htmlFor="language" className="block text-sm font-bold text-gray-700">Language:</label>
                                <input type="text" id="language" name="language" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" />
                            </div>
                            <div>
                                <label htmlFor="framework" className="block text-sm font-bold text-gray-700">Framework:</label>
                                <input type="text" id="framework" name="framework" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" />
                            </div>
                             <div>
                                <label htmlFor="serverEnvironment" className="block text-sm font-bold text-gray-700">Server Environment:</label>
                                <input type="text" id="serverEnvironment" name="serverEnvironment" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" placeholder="e.g. AWS, On-prem" />
                            </div>
                        </div>
                        <div className="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-2">
                            <div>
                                <label htmlFor="facing" className="block text-sm font-bold text-gray-700">Facing:</label>
                                <input type="text" id="facing" name="facing" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" placeholder="e.g. Internal, External" />
                            </div>
                            <div>
                                <label htmlFor="deploymentType" className="block text-sm font-bold text-gray-700">Deployment Type:</label>
                                <input type="text" id="deploymentType" name="deploymentType" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" placeholder="e.g. Scheduled, Ad-hoc" />
                            </div>
                        </div>
                        <div>
                            <label htmlFor="repoUrl" className="block text-sm font-bold text-gray-700">Repository URL:</label>
                            <input type="url" id="repoUrl" name="repoUrl" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" />
                        </div>
                        <div>
                            <label htmlFor="authProfiles" className="block text-sm font-bold text-gray-700">Necessary Auth Profiles:</label>
                            <input type="text" id="authProfiles" name="authProfiles" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" />
                        </div>
                        <div>
                            <label htmlFor="dataTypes" className="block text-sm font-bold text-gray-700">Data Types Collected/Stored:</label>
                            <input type="text" id="dataTypes" name="dataTypes" className="mt-1 shadow appearance-none border rounded w-full py-2 px-3 text-gray-700" placeholder="e.g. PII, PCI" />
                        </div>
                        <div>
                            <button type="submit" className="bg-blue-700 hover:bg-blue-800 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
                                Add Application
                            </button>
                        </div>
                    </form>
                </div>

                <div className="bg-white p-6 rounded-lg shadow-md">
                    <h2 className="text-2xl font-semibold text-gray-700 mb-4">Existing Applications</h2>
                    {applications.length > 0 ? (
                        <div className="overflow-x-auto">
                            <table className="min-w-full bg-white">
                                <thead className="bg-gray-100">
                                    <tr>
                                        <th className="py-2 px-4 border-b">Name</th>
                                        <th className="py-2 px-4 border-b">Owner</th>
                                        <th className="py-2 px-4 border-b">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {applications.map(app => (
                                        <React.Fragment key={app.id}>
                                            <tr onClick={() => setExpandedAppId(expandedAppId === app.id ? null : app.id)} className="hover:bg-gray-50 cursor-pointer">
                                                <td className="py-2 px-4 border-b font-medium">{app.name}</td>
                                                <td className="py-2 px-4 border-b text-sm text-gray-600">{app.owner || 'N/A'}</td>
                                                <td className="py-2 px-4 border-b text-center">
                                                    <button onClick={(e) => { e.stopPropagation(); setEditingApp(app); }} className="text-blue-500 hover:underline">Edit</button>
                                                </td>
                                            </tr>
                                            {expandedAppId === app.id && (
                                                <tr>
                                                    <td colSpan="3" className="p-4 bg-gray-50">
                                                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm">
                                                            <div>
                                                                <h4 className="font-semibold text-gray-700">Description</h4>
                                                                <p className="text-gray-600 mt-1">{app.description || 'N/A'}</p>
                                                            </div>
                                                            <div>
                                                                <h4 className="font-semibold text-gray-700">Owner</h4>
                                                                <p className="text-gray-600 mt-1">{app.owner || 'N/A'}</p>
                                                            </div>
                                                            <div>
                                                                <h4 className="font-semibold text-gray-700">Repository</h4>
                                                                {app.repoUrl ? (
                                                                    <a href={app.repoUrl} target="_blank" className="text-blue-500 hover:underline mt-1 block break-all">{app.repoUrl}</a>
                                                                ) : (
                                                                    <p className="text-gray-600 mt-1">N/A</p>
                                                                )}
                                                            </div>
                                                        </div>
                                                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4 text-sm mt-4 pt-4 border-t">
                                                            <div>
                                                                <h4 className="font-semibold text-gray-700">Language</h4>
                                                                <p className="text-gray-600 mt-1">{app.language || 'N/A'}</p>
                                                            </div>
                                                            <div>
                                                                <h4 className="font-semibold text-gray-700">Framework</h4>
                                                                <p className="text-gray-600 mt-1">{app.framework || 'N/A'}</p>
                                                            </div>
                                                            <div>
                                                                <h4 className="font-semibold text-gray-700">Server Environment</h4>
                                                                <p className="text-gray-600 mt-1">{app.serverEnvironment || 'N/A'}</p>
                                                            </div>
                                                        </div>
                                                         <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 text-sm mt-4 pt-4 border-t">
                                                            <div>
                                                                <h4 className="font-semibold text-gray-700">Facing</h4>
                                                                <p className="text-gray-600 mt-1">{app.facing || 'N/A'}</p>
                                                            </div>
                                                             <div>
                                                                <h4 className="font-semibold text-gray-700">Deployment Type</h4>
                                                                <p className="text-gray-600 mt-1">{app.deploymentType || 'N/A'}</p>
                                                            </div>
                                                        </div>
                                                        <div className="mt-4 pt-4 border-t text-sm">
                                                            <h4 className="font-semibold text-gray-700">Necessary Auth Profiles</h4>
                                                            <p className="text-gray-600 mt-1">{app.authProfiles || 'N/A'}</p>
                                                        </div>
                                                        <div className="mt-4 pt-4 border-t text-sm">
                                                            <h4 className="font-semibold text-gray-700">Data Types Collected/Stored</h4>
                                                            <p className="text-gray-600 mt-1">{app.dataTypes || 'N/A'}</p>
                                                        </div>
                                                    </td>
                                                </tr>
                                            )}
                                        </React.Fragment>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    ) : (
                         <p className="text-gray-600">There are no applications associated with your company yet.</p>
                    )}
                </div>
                <EditApplicationModal 
                    app={editingApp}
                    onClose={() => setEditingApp(null)}
                    onSave={handleSave}
                />
            </div>
        );
    };

    const initialApps = <%- JSON.stringify(applications) %>;
    const initialCompany = <%- JSON.stringify(company) %>;

    ReactDOM.render(
        <MyApplicationsPage initialApps={initialApps} initialCompany={initialCompany} />,
        document.getElementById('my-apps-root')
    );

</script>

<%- include('partials/footer') %>
